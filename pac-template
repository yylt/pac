var proxy = __PROXY__;

var allowAlert = false;

var direct = 'DIRECT';

var directDomains = __DIRECT_DOMAINS__;

var proxyDomains= __PROXY_DOMAINS__;

var directCidrs = __DIRECT_CIDRS__;

function sub2Dot(key) {
    let i = 0;
    let dotCount = 0;
    while (i < key.length) {
        if (key[key.length - i - 1] === '.') {
            if (++dotCount === 2) {
                return key.substring(key.length - i);
            }
        }
        i++;
    }
    return key;
}

function isIpAddress(ip) {
    return /^\d{1,3}(\.\d{1,3}){3}$/.test(ip) || /^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$/.test(ip);
}

function ipToBinary(ip) {
    // Check if it's IPv4
    if (/^\d{1,3}(\.\d{1,3}){3}$/.test(ip)) {
        return ip.split('.').map(function(num) { return ("00000000" + parseInt(num, 10).toString(2)).slice(-8); }).join('');
    } else if (/^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$/.test(ip)) {
        // Expand the IPv6 address if it contains '::'
        var parts = ip.split('::');
        var left = parts[0] ? parts[0].split(':') : [];
        var right = parts[1] ? parts[1].split(':') : [];
        
        // Calculate the number of zero groups to insert
        var zeroGroups = 8 - (left.length + right.length);
        
        // Create the full address by inserting zero groups
        var fullAddress = left.concat(Array(zeroGroups + 1).join('0').split('')).concat(right);
        
        // Convert each group to binary and pad to 16 bits
        return fullAddress.map(function(group) {
            return ("0000000000000000" + parseInt(group || '0', 16).toString(2)).slice(-16);
        }).join('');
    }
}

function FindProxyForURL(url, host) {
    if (isPlainHostName(host) || host === 'localhost') {
        debug('命中本地主机', host, 'N/A');
        return direct;
    } else {
        const key = sub2Dot(host);
        const parts = key.split('.');
        if (parts.length === 2) {
            const reversedParts = [parts[1], parts[0]];
            if (trieTree.match(reversedParts, false)) {
                debug('命中直连域名', host, 'N/A');
                return direct;
            }
            if (trieTree.match(reversedParts, true)) {
                debug('命中代理域名', host, 'N/A');
                return proxy;
            }
        }
    }

    ip = isIpAddress(host) ? host : dnsResolve(host);

    if (!ip) {
        debug('无法解析 IP 地址', host, 'N/A');
        return direct;
    } 
    if (trieTree.match(ipToBinary(ip), true)) {
        debug('匹配到直连IP', host, ip);
        return direct;
    }

    debug('使用代理', host, ip);
    return proxy;
}

function TrieNode(value = null)
{
	this.value = value;
	this.children = new Map();
}

function Trie() 
{
	this.root = new TrieNode();
}

Trie.prototype.insert = function(key, value) {
    let node = this.root;
    for (let char of key) {
        if (!node.children.has(char)) {
            node.children.set(char, new TrieNode());
        }
        node = node.children.get(char);
    }
    node.value = value;
}

Trie.prototype.match = function(key, value) {
    let node = this.root;
    for (let char of key) {
        if (!node.children.has(char)) {
            return node.value === value;
        }
        node = node.children.get(char);
    }
    return node.value === value;
}

var trieTree = new Trie();

function debug(msg, host, ip) {
    if (!allowAlert) {
        return
    }
    try {
        alert('[' + host + ' -> ' + ip + '] ' + msg);
        //console.log('[' + host + ' -> ' + ip + '] ' + msg);
    } catch (e) {
        allowAlert = false
    }
}

(function () {
    debug('加载 cidr', 'N/A','N/A');
    for (let i=0; i<directCidrs.length; i++) {
        var cidr = directCidrs[i].trim();
        if (cidr.length ===0) {
            continue
        }
        var [ip, prefixLen] = cidr.split('/');
        var bits = ipToBinary(ip).slice(0, prefixLen);
        trieTree.insert(bits, true);
    }
    debug('加载 proxyDomain', 'N/A','N/A');
    for (let i=0; i<proxyDomains.length; i++) {
        var domain = proxyDomains[i].trim();
        if (domain.length ===0) {
            continue
        }
        const parts = domain.split('.');
        if (parts.length === 2) {
            trieTree.insert([parts[1],parts[0]], true);
        }
    }
    debug('加载 directDomain', 'N/A','N/A');
    for (let i=0; i<directDomains.length; i++) {
        var domain = directDomains[i].trim();
        if (domain.length ===0) {
            continue
        }
        const parts = domain.split('.');
        if (parts.length === 2) {
            trieTree.insert([parts[1],parts[0]], false);
        }
    }
    debug('已生成 Tree', 'PAC文件载入完毕', 'N/A');
})();